// <auto-generated />
using System;
using CastingBase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace castingbase.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250808205925_VI")]
    partial class VI
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CastingBase.Production", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Budget")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductionCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Production_Code");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("CastingBase.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductionId1")
                        .HasColumnType("uuid");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationToken")
                        .HasColumnType("text");

                    b.Property<int>("StepCompleted")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)")
                        .HasDefaultValue("BaseUser");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EMail")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Email");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_User_PhoneNumber");

                    b.HasIndex("ProductionId1");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Username");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("BaseUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CastingBase.Actor", b =>
                {
                    b.HasBaseType("CastingBase.User");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.ToTable("Users", t =>
                        {
                            t.Property("Bio")
                                .HasColumnName("Actor_Bio");

                            t.Property("DateOfBirth")
                                .HasColumnName("Actor_DateOfBirth");
                        });

                    b.HasDiscriminator().HasValue("Actor");
                });

            modelBuilder.Entity("CastingBase.CastingDirector", b =>
                {
                    b.HasBaseType("CastingBase.User");

                    b.HasIndex("ProductionId");

                    b.HasDiscriminator().HasValue("CastingDirector");
                });

            modelBuilder.Entity("CastingBase.Director", b =>
                {
                    b.HasBaseType("CastingBase.User");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.HasIndex("ProductionId");

                    b.ToTable("Users", t =>
                        {
                            t.Property("Bio")
                                .HasColumnName("Director_Bio");
                        });

                    b.HasDiscriminator().HasValue("Director");
                });

            modelBuilder.Entity("CastingBase.Producer", b =>
                {
                    b.HasBaseType("CastingBase.User");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ProductionId");

                    b.HasDiscriminator().HasValue("Producer");
                });

            modelBuilder.Entity("CastingBase.User", b =>
                {
                    b.HasOne("CastingBase.Production", null)
                        .WithMany("Users")
                        .HasForeignKey("ProductionId1");
                });

            modelBuilder.Entity("CastingBase.CastingDirector", b =>
                {
                    b.HasOne("CastingBase.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("CastingBase.Director", b =>
                {
                    b.HasOne("CastingBase.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("CastingBase.Producer", b =>
                {
                    b.HasOne("CastingBase.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("CastingBase.Production", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
